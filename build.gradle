buildscript {
    ext {
        gitPropertiesVersion = '2.4.1'
        springVersion = '6.1.1'
        springBootVersion = '3.2.0'
        springDependencyManagement = '1.1.4'
        springRabbitVersion = '3.1.0'
        springdocOpenapiVersion = "2.2.0"
        springOAuthVersion = '3.2.0'

        prometheusVersion = '1.12.0'

        logbackVersion = '1.4.5'
        sentryVersion = '6.13.1'

        jacksonVersion = '2.16.0'
        lombokVersion = '1.18.30'
        openapiGeneratorVersion = '6.2.0'

        postgresVersion = '42.7.0'
        liquibaseVersion = '4.25.0'

        mapstructVersion = '1.5.0.Final'
        javaxAnnotationVersion = '1.3.2'
        swaggerVersion = '2.2.19'

        testcontainersVersion = '1.17.6'
        jupiterVersion = '5.8.0'
        junitVersion = '4.13.2'
        mockserverVersion = '5.11.2'
        mockitoVersion = '4.6.1'

        jacocoVersion = '0.8.12'
        sonarVersion = '5.0.0.4638'
    }

    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:$springDependencyManagement"
        classpath "com.gorylenko.gradle-git-properties:gradle-git-properties:$gitPropertiesVersion"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarVersion"
    }
}

allprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'io.spring.dependency-management'
    apply plugin: "com.gorylenko.gradle-git-properties"


    dependencyManagement {
        dependencies {
            dependency "org.projectlombok:lombok:$lombokVersion"

            dependency "ch.qos.logback:logback-classic:$logbackVersion"
            dependency "io.sentry:sentry-spring-boot-starter:$sentryVersion"
            dependency "io.sentry:sentry-spring-boot-starter-jakarta:$sentryVersion"
            dependency "io.sentry:sentry-logback:$sentryVersion"

            dependency "org.springframework:spring-core:$springVersion"
            dependency "org.springframework:spring-jdbc:$springVersion"
            dependency "org.springframework:spring-context:$springVersion"
            dependency "org.springframework:spring-web:$springVersion"
            dependency "org.springframework:spring-webmvc:$springVersion"

            dependency "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
            dependency "org.springframework.boot:spring-boot-starter-amqp:$springBootVersion"

            dependency "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
            dependency "io.micrometer:micrometer-registry-prometheus:$prometheusVersion"

            dependency "org.springframework.boot:spring-boot-starter-cache:$springBootVersion"
            dependency "org.springframework.boot:spring-boot-starter-data-redis:$springBootVersion"

            dependency "org.springframework.boot:spring-boot-starter-data-jdbc:$springBootVersion"
            dependency "org.springframework.boot:spring-boot-starter-jdbc:$springBootVersion"

            dependency "org.springframework.boot:spring-boot-starter:$springBootVersion"
            dependency "org.springframework.boot:spring-boot-starter-oauth2-resource-server:$springOAuthVersion"
            dependency "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"

            dependency "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springdocOpenapiVersion"

            dependency "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
            dependency "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
            dependency "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"

            dependency "org.postgresql:postgresql:$postgresVersion"
            dependency "org.liquibase:liquibase-core:$liquibaseVersion"

            dependency "org.mapstruct:mapstruct:$mapstructVersion"
            dependency "org.mapstruct:mapstruct-processor:$mapstructVersion"

            dependency "javax.annotation:javax.annotation-api:$javaxAnnotationVersion"
            dependency "io.swagger.core.v3:swagger-annotations:$swaggerVersion"

            // test
            dependency "junit:junit:$junitVersion"
            dependency "org.junit.jupiter:junit-jupiter:$jupiterVersion"
            dependency "org.springframework:spring-test:$springVersion"

            dependency "org.mockito:mockito-core:$mockitoVersion"
            dependency "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
            dependency "org.mock-server:mockserver-netty:$mockserverVersion"
            dependency "org.mock-server:mockserver-client-java:$mockserverVersion"
        }
    }
}


subprojects {

    apply plugin: 'jacoco'
    apply plugin: "org.sonarqube"

    sonarqube {
        properties {
            // sonar.projectKey: driver_bff:tasks-api, driver_bff:adaptertms и т.п.
            property "sonar.projectKey", "${rootProject.name}:${project.path.replace(':', '-')}"
            property "sonar.projectName", "${rootProject.name}:${project.path.replace(':', '-')}"
        }
    }

    // для каждого подпроекта проверяем наличие нужных конфигов
    // и добавляем их в testAnnotationProcessor и testCompileOnly при наличии
    afterEvaluate {
        configurations {
            if (configurations.findByName('annotationProcessor') && configurations.findByName('compileOnly')) {
                testAnnotationProcessor {
                    extendsFrom annotationProcessor
                }
                testCompileOnly {
                    extendsFrom compileOnly
                }
            }
        }
    }
}

group 'saas.driver-bff'
version '1.0.0'
